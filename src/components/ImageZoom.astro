---
import type { ImageMetadata } from 'astro'
import { Image } from 'astro:assets'

interface Props {
  src: string
  alt: string
  loading?: 'lazy' | 'eager'
}

const { src, alt = 'Image', loading } = Astro.props

const images = import.meta.glob<{ default: ImageMetadata }>(
  '../images/**/*.{jpg,jpeg,png,gif,webp,svg}'
)
const realSrc = `../images/${src}`
if (!images[realSrc]) {
  throw new Error(`Image not found: ${src}`)
}
---

<script>
  const dialogFadeOut = [
    { opacity: 1, transform: 'scale(1)' },
    { opacity: 0, transform: 'scale(0)' }
  ]
  const handleClick = (event: Event) => {
    event.preventDefault()
    const target = event.target as HTMLImageElement
    const dialog = document.createElement('dialog')
    const img = document.createElement('img')
    dialog.appendChild(img)
    img.src = target.src
    img.alt = target.alt
    document.body.appendChild(dialog)
    dialog.setAttribute('width', img.width.toString())
    dialog.setAttribute('height', img.height.toString())
    dialog.addEventListener(
      'click',
      () =>
        (dialog.animate(dialogFadeOut, {
          duration: 300,
          easing: 'ease'
        }).onfinish = () => dialog.remove())
    )
    dialog.showModal()
  }

  const zoomableImages = document.querySelectorAll('img.zoom')
  zoomableImages.forEach((img) => {
    img.addEventListener('click', handleClick)
  })
</script>

<Image src={images[realSrc]()} alt={alt} class="zoom" loading={loading} />

<style is:global>
  img.zoom {
    max-width: 100%;
    height: auto;
    transition: all 0.2s ease;
    &.zoom {
      cursor:
        url(../images/cursors/zoom-in.svg) 50 50,
        zoom-in;
    }
    &:hover {
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
    }
  }
  dialog {
    display: flex;
    justify-content: center;
    align-items: center;
    border: none;
    border-radius: 10px;
    outline: none;
    padding: 0;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
    cursor:
      url(../images/cursors/zoom-out.svg) 50 50,
      zoom-out;
    img {
      max-width: 100%;
      max-height: 80vh;
      &:hover {
        transform: none;
        box-shadow: none;
      }
    }
  }
  dialog::backdrop {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
  }
  dialog[open] {
    animation: dialog-fade-in 0.3s ease;
  }
  @keyframes dialog-fade-in {
    from {
      opacity: 0;
      transform: scale(0.7);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>
